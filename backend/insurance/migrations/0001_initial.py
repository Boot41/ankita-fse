# Generated by Django 5.1.6 on 2025-02-24 10:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255)),
                ('age', models.IntegerField(help_text="User's age in years", null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('budget', models.DecimalField(decimal_places=2, help_text='Monthly budget for insurance in dollars', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('family_size', models.IntegerField(help_text='Number of family members to be covered', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('medical_history', models.TextField(blank=True, help_text='Detailed medical history of the user')),
                ('preferred_hospital_network', models.CharField(blank=True, help_text='Preferred hospital network', max_length=100)),
                ('is_profile_complete', models.BooleanField(default=False, help_text='Whether the user has completed their profile')),
                ('dark_mode_enabled', models.BooleanField(default=False, help_text="User's preference for dark mode")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InsurancePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the insurance plan', max_length=255, unique=True)),
                ('plan_type', models.CharField(choices=[('basic', 'Basic'), ('standard', 'Standard'), ('premium', 'Premium'), ('family', 'Family'), ('senior', 'Senior'), ('specialized', 'Specialized')], default='basic', help_text='Type of insurance plan', max_length=20)),
                ('provider', models.CharField(help_text='Insurance provider company name', max_length=255)),
                ('description', models.TextField(help_text='Brief description of the insurance plan')),
                ('coverage_details', models.TextField(help_text='Detailed information about what the plan covers')),
                ('eligibility_criteria', models.TextField(help_text='Requirements that must be met to be eligible for this plan')),
                ('monthly_premium', models.DecimalField(decimal_places=2, help_text='Monthly premium cost in dollars', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('deductible', models.DecimalField(decimal_places=2, help_text='Annual deductible amount in dollars', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('copay', models.DecimalField(blank=True, decimal_places=2, help_text='Copay amount in dollars', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_coverage', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum coverage amount in dollars', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('network_hospitals', models.TextField(blank=True, help_text='List of network hospitals (comma-separated)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Insurance Plan',
                'verbose_name_plural': 'Insurance Plans',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='insurance_i_name_a9cb53_idx'), models.Index(fields=['provider'], name='insurance_i_provide_b70fd9_idx')],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('recommendation', 'Recommendation'), ('plan', 'Insurance Plan'), ('ui', 'User Interface'), ('general', 'General')], default='general', help_text='Type of feedback', max_length=20)),
                ('rating', models.IntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ui_element', models.CharField(blank=True, help_text='UI element this feedback is about', max_length=100)),
                ('comments', models.TextField(blank=True, help_text='Additional comments or feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who provided the feedback', on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to=settings.AUTH_USER_MODEL)),
                ('insurance_plan', models.ForeignKey(blank=True, help_text='Insurance plan this feedback is about', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedback', to='insurance.insuranceplan')),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlanComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comparison_name', models.CharField(blank=True, help_text='Optional name for this comparison', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='User notes about the comparison')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plans', models.ManyToManyField(help_text='Plans being compared', related_name='comparisons', to='insurance.insuranceplan')),
                ('user', models.ForeignKey(help_text='User who created the comparison', on_delete=django.db.models.deletion.CASCADE, related_name='comparisons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Plan Comparison',
                'verbose_name_plural': 'Plan Comparisons',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserDashboardPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_view', models.CharField(choices=[('list', 'List View'), ('grid', 'Grid View'), ('compact', 'Compact View')], default='grid', help_text="User's preferred view type", max_length=20)),
                ('show_premium_first', models.BooleanField(default=False, help_text='Whether to prioritize premium plans in display')),
                ('notification_preferences', models.JSONField(default=dict, help_text='JSON object containing notification preferences')),
                ('widgets_order', models.TextField(blank=True, default='', help_text='Order of dashboard widgets (comma-separated)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='User whose preferences these are', on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dashboard Preference',
                'verbose_name_plural': 'Dashboard Preferences',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_score', models.FloatField(help_text='AI confidence score for this recommendation (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes or explanation for the recommendation')),
                ('is_accepted', models.BooleanField(default=None, help_text='Whether the user accepted this recommendation', null=True)),
                ('accepted_date', models.DateTimeField(blank=True, help_text='When the user accepted/rejected this recommendation', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('insurance_plan', models.ForeignKey(help_text='Recommended insurance plan', on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='insurance.insuranceplan')),
                ('user', models.ForeignKey(help_text='User receiving the recommendation', on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommendation',
                'verbose_name_plural': 'Recommendations',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['created_at'], name='insurance_r_created_2a2341_idx'), models.Index(fields=['recommendation_score'], name='insurance_r_recomme_2b0751_idx')],
            },
        ),
    ]
